"""Function Completion ChatGpt Interface.

This script provides a simple command-line interface to
interact with OpenAI's GPT model.
It loads environment variables, initializes an OpenAI client,
and defines functions to display a welcome message,
get user input, and fetch responses from the GPT model.

Functions:
    display_welcome_message():
        Display a welcome message to the user.

    get_user_input():
        Get user input from the command line.

    get_chatgpt_response(user_input, completions):
        Get a response from ChatGPT given user input and
        the number of completions to generate.

    chat_interface():
        Main chat loop that interacts with the user until 'quit' is typed.

    Usage:
    Run the script and interact with the GPT model via the command line.
"""


import os


from dotenv import load_dotenv

from openai import OpenAI

from stringcolor import cs

# loading the environment variables
load_dotenv()
# getting the API key from the environment variables
safe_secret = os.getenv('gpt')
# creating a client object
client = OpenAI(api_key=safe_secret)


def display_welcome_message():
    """Display a welcome message to the user."""
    print(cs('Welcome to ChatGPT!', 'blue'))
    print(cs('Type "quit" to exit the chat.\n', 'green'))


def get_user_input():
    """Get user input from the command line."""
    return input('You: ')


def get_chatgpt_response(user_input, completions: int):
    """Get a response from ChatGPT given user input.

    Arguments:
        user_input (str): The user's input to ChatGPT.
        completions (int): The number of completions to generate.


    Completions:
        - model: choosing model of openai's AI
        - prompt: user_input choosing what to use for prompting
        - max_tokens: limit the maximum response tokens
        - temperature: choosing temperature (more random/creative here)
        - n: completions modifiable completion number
        - best_of: Generates n * best completions and returns the best n.
        - echo: Return the user input in the response if set to True
        - presence_penalty: higher value = more likely to introduce new topics
        - frequency_penalty: higher value = more likely to repeat information

    Returns:
        list: A list of completions generated by ChatGPT.
    """
    response = client.completions.create(
        model='gpt-4o',
        prompt=user_input,
        max_tokens=150,
        temperature=1.0,
        n=completions,
        best_of=3,
        echo=False,
        presence_penalty=0.5,
        frequency_penalty=0.5
        )
    choices = []
    for i in range(completions):
        choices.append(response.choices[i].text.strip())
    return choices


def chat_interface():
    """Return chat loop that interacts with the user until 'quit' is typed."""
    display_welcome_message()
    # Its not actually a chat, Completion can not remember
    while True:
        user_input = get_user_input()
        if user_input.lower() == 'quit':
            break
        response = get_chatgpt_response(user_input, 1)
        print('CHAT GPT: ')
        for i in response:
            print(cs(i, 'green'))


if __name__ == '__main__':
    chat_interface()
